// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pos_cpp_vec
List pos_cpp_vec(StringVector& inputs, std::string model_path);
RcppExport SEXP _RcppJagger_pos_cpp_vec(SEXP inputsSEXP, SEXP model_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_path(model_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(pos_cpp_vec(inputs, model_path));
    return rcpp_result_gen;
END_RCPP
}
// pos_simple_cpp_vec
List pos_simple_cpp_vec(StringVector& inputs, std::string model_path);
RcppExport SEXP _RcppJagger_pos_simple_cpp_vec(SEXP inputsSEXP, SEXP model_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_path(model_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(pos_simple_cpp_vec(inputs, model_path));
    return rcpp_result_gen;
END_RCPP
}
// tokenize_cpp_vec
StringVector tokenize_cpp_vec(StringVector& inputs, std::string model_path, StringVector& keep_vec, bool keep_all);
RcppExport SEXP _RcppJagger_tokenize_cpp_vec(SEXP inputsSEXP, SEXP model_pathSEXP, SEXP keep_vecSEXP, SEXP keep_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_path(model_pathSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type keep_vec(keep_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all(keep_allSEXP);
    rcpp_result_gen = Rcpp::wrap(tokenize_cpp_vec(inputs, model_path, keep_vec, keep_all));
    return rcpp_result_gen;
END_RCPP
}
// lemmatize_cpp_vec
StringVector lemmatize_cpp_vec(StringVector& inputs, std::string model_path, StringVector& keep_vec, bool keep_all);
RcppExport SEXP _RcppJagger_lemmatize_cpp_vec(SEXP inputsSEXP, SEXP model_pathSEXP, SEXP keep_vecSEXP, SEXP keep_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_path(model_pathSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type keep_vec(keep_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all(keep_allSEXP);
    rcpp_result_gen = Rcpp::wrap(lemmatize_cpp_vec(inputs, model_path, keep_vec, keep_all));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppJagger_pos_cpp_vec", (DL_FUNC) &_RcppJagger_pos_cpp_vec, 2},
    {"_RcppJagger_pos_simple_cpp_vec", (DL_FUNC) &_RcppJagger_pos_simple_cpp_vec, 2},
    {"_RcppJagger_tokenize_cpp_vec", (DL_FUNC) &_RcppJagger_tokenize_cpp_vec, 4},
    {"_RcppJagger_lemmatize_cpp_vec", (DL_FUNC) &_RcppJagger_lemmatize_cpp_vec, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppJagger(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
